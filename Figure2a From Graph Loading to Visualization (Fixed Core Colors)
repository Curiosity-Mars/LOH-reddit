# ===================================================================
# Final Version: From Graph Loading to Visualization (Fixed Core Colors)
# ===================================================================

import networkx as nx
import matplotlib.pyplot as plt
import community.community_louvain as community_louvain
import pickle
import os

# --- Step 1: Load full graph object ---
full_graph_path = "/content/AMS_full_graph.gpickle"

if not os.path.exists(full_graph_path):
    print(f"Error: Graph file '{full_graph_path}' not found.")
    print("Please rerun the graph construction script or upload the file.")
else:
    with open(full_graph_path, "rb") as f:
        G_full = pickle.load(f)
    print(f"✅ Full graph loaded with {len(G_full.nodes())} nodes.")

    # --- Step 2: Create subgraph of top 1000 nodes by degree ---
    degrees = dict(G_full.degree())
    sorted_nodes = sorted(degrees, key=degrees.get, reverse=True)
    top_nodes = sorted_nodes[:1000]
    G_sub = G_full.subgraph(top_nodes)
    print(f"✅ Subgraph G_sub created with {len(G_sub.nodes())} nodes.")

    # --- Step 3: Extract the largest connected component ---
    largest_component = max(nx.connected_components(G_sub), key=len)
    G_conn = G_sub.subgraph(largest_component)
    print(f"✅ Largest component G_conn extracted with {len(G_conn.nodes())} nodes.")

    # --- Step 4: Visualization setup ---
    G = G_conn  # use this component for plotting

    # Define core AMS terms (fixed-color nodes)
    core_terms = [
        "sleep", "anxiety", "mood", "depression", "irritability",
        "libido", "desire", "sexual", "erection", "morning",
        "fatigue", "pain", "muscle", "strength", "back",
        "joint", "hot", "performance", "peak",
        "tired", "energy", "motivation", "weakness"
    ]

    # Predefined color mapping for core AMS terms
    color_map_core = {
        'sleep': '#2ca02c', 'anxiety': '#1f77b4', 'mood': '#2ca02c', 'depression': '#1f77b4',
        'libido': '#2ca02c', 'desire': '#d62728', 'sexual': '#d62728', 'erection': '#1f77b4',
        'morning': '#2ca02c', 'fatigue': '#ff7f0e', 'pain': '#ff7f0e', 'muscle': '#ff7f0e',
        'strength': '#ff7f0e', 'back': '#2ca02c', 'joint': '#ff7f0e', 'hot': '#2ca02c',
        'performance': '#1f77b4', 'peak': '#d62728', 'tired': '#2ca02c',
        'energy': '#2ca02c', 'motivation': '#2ca02c', 'weakness': '#ff7f0e',
        'irritability': '#1f77b4'
    }

    # --- Community detection (Louvain) ---
    partition = community_louvain.best_partition(G, weight='weight')

    # --- Compute layout ---
    pos = nx.spring_layout(G, k=0.5, iterations=150, seed=42)
    colors_community = plt.cm.tab20(range(len(set(partition.values()))))

    # --- Draw network ---
    plt.figure(figsize=(15, 15))

    # Regular (non-core) nodes
    normal_nodes = [n for n in G.nodes() if n not in core_terms]
    node_colors_normal = [colors_community[partition[n] % 20] for n in normal_nodes]
    nx.draw_networkx_nodes(
        G, pos,
        nodelist=normal_nodes,
        node_color=node_colors_normal,
        node_size=350,
        alpha=0.7,
        edgecolors='black',
        linewidths=0.5
    )

    # Core nodes (fixed color)
    core_nodes_in_graph = [n for n in G.nodes() if n in core_terms]
    node_colors_core = [color_map_core.get(n, '#a9a9a9') for n in core_nodes_in_graph]
    nx.draw_networkx_nodes(
        G, pos,
        nodelist=core_nodes_in_graph,
        node_color=node_colors_core,
        node_size=1200,
        edgecolors='black',
        linewidths=3.0,
        alpha=1.0
    )

    # Edges
    nx.draw_networkx_edges(G, pos, width=0.6, alpha=0.3)

    # Labels (normal and core)
    normal_labels = {n: n for n in normal_nodes}
    core_labels = {n: n for n in core_nodes_in_graph}
    nx.draw_networkx_labels(G, pos, labels=normal_labels, font_size=9, alpha=0.9)
    nx.draw_networkx_labels(G, pos, labels=core_labels, font_size=11, font_weight='bold')

    # Finalize plot
    plt.title("Network Visualization with Fixed Core Colors", fontsize=16)
    plt.axis('off')
    plt.tight_layout()

    # --- Save and download ---
    output_path = '/content/Figure_Final_FixedCoreColors.png'
    plt.savefig(output_path, dpi=300, bbox_inches='tight')
    plt.show()

    from google.colab import files
    files.download(output_path)
